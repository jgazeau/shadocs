"use strict";!function(e){"object"==typeof module&&module.exports?module.exports=e.default=e:"function"==typeof define&&define.amd?define("highcharts/indicators/dmi",["highcharts","highcharts/modules/stock"],function(t){return e(t),e.Highcharts=t,e}):e("undefined"!=typeof Highcharts?Highcharts:void 0)}(function(t){function e(t,e,s,i){t.hasOwnProperty(e)||(t[e]=i.apply(null,s),"function"==typeof CustomEvent&&window.dispatchEvent(new CustomEvent("HighchartsModuleLoaded",{detail:{path:e,module:t[e]}})))}e(t=t?t._modules:{},"Stock/Indicators/MultipleLinesComposition.js",[t["Core/Series/SeriesRegistry.js"],t["Core/Utilities.js"]],function(t,s){const u=t.seriesTypes["sma"]["prototype"],{defined:d,error:m,merge:f}=s;var e;{function y(t){return"plot"+t.charAt(0).toUpperCase()+t.slice(1)}function g(t,e){const s=[];return(t.pointArrayMap||[]).forEach(t=>{t!==e&&s.push(y(t))}),s}function i(){const s=this,t=s.linesApiNames;var e=s.areaLinesNames;const i=s.points,a=s.options,o=s.graph,n={options:{gapSize:a.gapSize}},r=[];var l,p=g(s,s.pointValKey);let h=i.length,c;p.forEach((t,e)=>{for(r[e]=[];h--;)c=i[h],r[e].push({x:c.x,plotX:c.plotX,plotY:c[t],isNull:!d(c[t])});h=i.length}),s.userOptions.fillColor&&e.length&&(l=p.indexOf(y(e[0])),l=r[l],e=1===e.length?i:r[p.indexOf(y(e[1]))],p=s.color,s.points=e,s.nextPoints=l,s.color=s.userOptions.fillColor,s.options=f(i,n),s.graph=s.area,s.fillGraph=!0,u.drawGraph.call(s),s.area=s.graph,delete s.nextPoints,delete s.fillGraph,s.color=p),t.forEach((t,e)=>{r[e]?(s.points=r[e],a[t]?s.options=f(a[t].styles,n):m('Error: "There is no '+t+' in DOCS options declared. Check if linesApiNames are consistent with your DOCS line names."'),s.graph=s["graph"+t],u.drawGraph.call(s),s["graph"+t]=s.graph):m('Error: "'+t+" doesn't have equivalent in pointArrayMap. To many elements in linesApiNames relative to pointArrayMap.\"")}),s.points=i,s.options=a,s.graph=o,u.drawGraph.call(s)}function a(t){var e;let s=[];if(t=t||this.points,this.fillGraph&&this.nextPoints){if((e=u.getGraphPath.call(this,this.nextPoints))&&e.length){e[0][0]="L",s=u.getGraphPath.call(this,t);for(let t=(e=e.slice(0,s.length)).length-1;0<=t;t--)s.push(e[t])}}else s=u.getGraphPath.apply(this,arguments);return s}function o(e){const s=[];return(this.pointArrayMap||[]).forEach(t=>{s.push(e[t])}),s}function n(){const t=this.pointArrayMap;let i,a;i=g(this),u.translate.apply(this,arguments),this.points.forEach(s=>{t.forEach((t,e)=>{a=s[t],null!==(a=this.dataModify?this.dataModify.modifyValue(a):a)&&(s[i[e]]=this.yAxis.toPixels(a,!0))})})}t=e=e||{};const r=[],l=["bottomLine"],p=["top","bottom"],h=["top"];t.compose=function(t){if(s.pushUnique(r,t)){const e=t.prototype;e.linesApiNames=e.linesApiNames||l.slice(),e.pointArrayMap=e.pointArrayMap||p.slice(),e.pointValKey=e.pointValKey||"top",e.areaLinesNames=e.areaLinesNames||h.slice(),e.drawGraph=i,e.getGraphPath=a,e.toYData=o,e.translate=n}return t}}return e}),e(t,"Stock/Indicators/DMI/DMIIndicator.js",[t["Stock/Indicators/MultipleLinesComposition.js"],t["Core/Series/SeriesRegistry.js"],t["Core/Utilities.js"]],function(t,e,s){const i=e.seriesTypes["sma"],{correctFloat:n,extend:a,isArray:m,merge:o}=s;class r extends i{constructor(){super(...arguments),this.options=void 0}calculateDM(t,e,s){var i=t[e][1],a=t[e][2],o=t[e-1][1];return t=t[e-1][2],n(t-a<i-o?s?Math.max(i-o,0):0:s?0:Math.max(t-a,0))}calculateDI(t,e){return t/e*100}calculateDX(t,e){return n(Math.abs(t-e)/Math.abs(t+e)*100)}smoothValues(t,e,s){return n(t-t/s+e)}getTR(t,e){return n(Math.max(t[1]-t[2],e?Math.abs(t[1]-e[3]):0,e?Math.abs(t[2]-e[3]):0))}getValues(t,e){e=e.period;const s=t.xData,i=(t=t.yData)?t.length:0,a=[],o=[],n=[];if(!(s.length<=e)&&m(t[0])&&4===t[0].length){for(var r=0,l=0,p=0,h=1;h<i;h++){var c=void 0,u=void 0,d=void 0;h<=e?(r+=c=this.calculateDM(t,h,!0),l+=u=this.calculateDM(t,h),p+=d=this.getTR(t[h],t[h-1]),h===e&&(d=this.calculateDI(r,p),u=this.calculateDI(l,p),c=this.calculateDX(r,l),a.push([s[h],c,d,u]),o.push(s[h]),n.push([c,d,u]))):(c=this.calculateDM(t,h,!0),u=this.calculateDM(t,h),d=this.getTR(t[h],t[h-1]),r=this.smoothValues(r,c,e),l=this.smoothValues(l,u,e),p=this.smoothValues(p,d,e),d=this.calculateDI(r,p),u=this.calculateDI(l,p),c=this.calculateDX(r,l),a.push([s[h],c,d,u]),o.push(s[h]),n.push([c,d,u]))}return{values:a,xData:o,yData:n}}}}return r.defaultOptions=o(i.defaultOptions,{params:{index:void 0},marker:{enabled:!1},tooltip:{pointFormat:'<span style="color: {point.color}">‚óè</span><b> {series.name}</b><br/><span style="color: {point.color}">DX</span>: {point.y}<br/><span style="color: {point.series.options.plusDILine.styles.lineColor}">+DI</span>: {point.plusDI}<br/><span style="color: {point.series.options.minusDILine.styles.lineColor}">-DI</span>: {point.minusDI}<br/>'},plusDILine:{styles:{lineWidth:1,lineColor:"#06b535"}},minusDILine:{styles:{lineWidth:1,lineColor:"#f21313"}},dataGrouping:{approximation:"averages"}}),a(r.prototype,{areaLinesNames:[],nameBase:"DMI",linesApiNames:["plusDILine","minusDILine"],pointArrayMap:["y","plusDI","minusDI"],parallelArrays:["x","y","plusDI","minusDI"],pointValKey:"y"}),t.compose(r),e.registerSeriesType("dmi",r),r}),e(t,"masters/indicators/dmi.src.js",[],function(){})});