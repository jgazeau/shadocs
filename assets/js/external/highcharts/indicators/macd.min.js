!function(o){"object"==typeof module&&module.exports?module.exports=o.default=o:"function"==typeof define&&define.amd?define("highcharts/indicators/macd",["highcharts","highcharts/modules/stock"],function(s){return o(s),o.Highcharts=s,o}):o("undefined"!=typeof Highcharts?Highcharts:void 0)}(function(s){"use strict";s=s?s._modules:{};function o(s,o,e,t){s.hasOwnProperty(o)||(s[o]=t.apply(null,e),"function"==typeof CustomEvent&&window.dispatchEvent(new CustomEvent("HighchartsModuleLoaded",{detail:{path:o,module:s[o]}})))}o(s,"Stock/Indicators/MACD/MACDIndicator.js",[s["Core/Globals.js"],s["Core/Series/SeriesRegistry.js"],s["Core/Utilities.js"]],function(s,d,o){let e=s["noop"],t=d.seriesTypes["sma"],{extend:i,correctFloat:c,defined:g,merge:a}=o;class n extends t{init(){d.seriesTypes.sma.prototype.init.apply(this,arguments);var s=this.color;this.options&&(g(this.colorIndex)&&(this.options.signalLine&&this.options.signalLine.styles&&!this.options.signalLine.styles.lineColor&&(this.options.colorIndex=this.colorIndex+1,this.getCyclic("color",void 0,this.chart.options.colors),this.options.signalLine.styles.lineColor=this.color),this.options.macdLine&&this.options.macdLine.styles&&!this.options.macdLine.styles.lineColor&&(this.options.colorIndex=this.colorIndex+1,this.getCyclic("color",void 0,this.chart.options.colors),this.options.macdLine.styles.lineColor=this.color)),this.macdZones={zones:this.options.macdLine.zones,startIndex:0},this.signalZones={zones:this.macdZones.zones.concat(this.options.signalLine.zones),startIndex:this.macdZones.zones.length}),this.color=s}toYData(s){return[s.y,s.signal,s.MACD]}translate(){let t=this,i=["plotSignal","plotMACD"];s.seriesTypes.column.prototype.translate.apply(t),t.points.forEach(function(e){[e.signal,e.MACD].forEach(function(s,o){null!==s&&(e[i[o]]=t.yAxis.toPixels(s,!0))})})}destroy(){this.graph=null,this.graphmacd=this.graphmacd&&this.graphmacd.destroy(),this.graphsignal=this.graphsignal&&this.graphsignal.destroy(),d.seriesTypes.sma.prototype.destroy.apply(this,arguments)}drawGraph(){let e=this,s=e.points,t=e.options,o=e.zones,i={options:{gapSize:t.gapSize}},n=[[],[]],r,l=s.length;for(;l--;)g((r=s[l]).plotMACD)&&n[0].push({plotX:r.plotX,plotY:r.plotMACD,isNull:!g(r.plotMACD)}),g(r.plotSignal)&&n[1].push({plotX:r.plotX,plotY:r.plotSignal,isNull:!g(r.plotMACD)});["macd","signal"].forEach((s,o)=>{e.points=n[o],e.options=a(t[s+"Line"]?.styles||{},i),e.graph=e["graph"+s],e.zones=(e[s+"Zones"].zones||[]).slice(e[s+"Zones"].startIndex||0),d.seriesTypes.sma.prototype.drawGraph.call(e),e["graph"+s]=e.graph}),e.points=s,e.options=t,e.zones=o}applyZones(){var s=this.zones;this.zones=this.signalZones.zones,d.seriesTypes.sma.prototype.applyZones.call(this),this.graphmacd&&this.options.macdLine.zones.length&&this.graphmacd.hide(),this.zones=s}getValues(s,o){let e=o.longPeriod-o.shortPeriod,t=[],i=[],n=[],r,l,a,p=0,h;if(!(s.xData.length<o.longPeriod+o.signalPeriod)){for(a=0,r=d.seriesTypes.ema.prototype.getValues(s,{period:o.shortPeriod,index:o.index}),l=d.seriesTypes.ema.prototype.getValues(s,{period:o.longPeriod,index:o.index}),r=r.values,l=l.values;a<=r.length;a++)g(l[a])&&g(l[a][1])&&g(r[a+e])&&g(r[a+e][0])&&t.push([r[a+e][0],0,null,r[a+e][1]-l[a][1]]);for(a=0;a<t.length;a++)i.push(t[a][0]),n.push([0,null,t[a][3]]);for(a=0,h=d.seriesTypes.ema.prototype.getValues({xData:i,yData:n},{period:o.signalPeriod,index:2}).values;a<t.length;a++)t[a][0]>=h[0][0]&&(t[a][2]=h[p][1],n[a]=[0,h[p][1],t[a][3]],null===t[a][3]?(t[a][1]=0,n[a][0]=0):(t[a][1]=c(t[a][3]-h[p][1]),n[a][0]=c(t[a][3]-h[p][1])),p++);return{values:t,xData:i,yData:n}}}}return n.defaultOptions=a(t.defaultOptions,{params:{shortPeriod:12,longPeriod:26,signalPeriod:9,period:26},signalLine:{zones:[],styles:{lineWidth:1,lineColor:void 0}},macdLine:{zones:[],styles:{lineWidth:1,lineColor:void 0}},threshold:0,groupPadding:.1,pointPadding:.1,crisp:!1,states:{hover:{halo:{size:0}}},tooltip:{pointFormat:'<span style="color:{point.color}">‚óè</span> <b> {series.name}</b><br/>Value: {point.MACD}<br/>Signal: {point.signal}<br/>Histogram: {point.y}<br/>'},dataGrouping:{approximation:"averages"},minPointLength:0}),i(n.prototype,{nameComponents:["longPeriod","shortPeriod","signalPeriod"],pointArrayMap:["y","signal","MACD"],parallelArrays:["x","y","signal","MACD"],pointValKey:"y",markerAttribs:e,getColumnMetrics:s.seriesTypes.column.prototype.getColumnMetrics,crispCol:s.seriesTypes.column.prototype.crispCol,drawPoints:s.seriesTypes.column.prototype.drawPoints}),d.registerSeriesType("macd",n),n}),o(s,"masters/indicators/macd.src.js",[s["Core/Globals.js"]],function(s){return s})});